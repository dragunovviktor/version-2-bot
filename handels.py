import re
from aiogram import Router, F
from aiogram.types import Message
from Parser import Parser
from datetime import datetime

router = Router()

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
DATE_REGEX = r"\b(\d{2}\.\d{2}\.\d{4})\b"


@router.message(F.command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥:\n"
        "- **–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ** ‚Äî —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "- **–ù–µ–¥–µ–ª—è** ‚Äî —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é\n"
        "- –í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì ‚Äî —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"
    )


@router.message(F.text)
async def handle_message(message: Message):
    text = message.text.strip().lower()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    if text == "–≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        await send_full_schedule(message)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    elif text == "–Ω–µ–¥–µ–ª—è":
        await send_schedule_for_week(message)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥–∞—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    elif re.match(r"\d{2}\.\d{2}\.\d{4}", text):
        await send_schedule_for_date(text, message)

    else:
        await message.answer(
            "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")


async def send_full_schedule(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
    """
    parser = Parser(Parser.url)
    soup = parser.parse()

    if soup:
        full_schedule = parser.extract_schedule(soup)
        response = "üìÖ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"

        for day, schedule in full_schedule.items():
            response += f"üìÖ **{day}**\n"
            for item in schedule:
                time = item['time']
                subject = item['subject']
                response += f"üïí {time} - {subject}\n"
            response += "\n"

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
        await send_message_in_parts(message, response)
        await send_commands(message)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def send_schedule_for_week(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    """
    parser = Parser(Parser.url)
    soup = parser.parse()

    if soup:
        full_schedule = parser.extract_schedule(soup)

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
        all_schedules = []
        for day, schedule in full_schedule.items():
            all_schedules.append((day, schedule))

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        last_7_days = all_schedules[-7:]

        response = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n\n"
        for day, schedule in last_7_days:
            response += f"üìÖ **{day}**\n"
            for item in schedule:
                time = item['time']
                subject = item['subject']
                response += f"üïí {time} - {subject}\n"
            response += "\n"

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
        await send_message_in_parts(message, response)
        await send_commands(message)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def send_schedule_for_date(date_str: str, message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∞—Ç—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.
    """
    parser = Parser(Parser.url)
    soup = parser.parse()

    if soup:
        full_schedule = parser.extract_schedule(soup)

        try:
            date_obj = datetime.strptime(date_str, "%d.%m.%Y")
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
            return

        date_str = date_obj.strftime("%d.%m.%Y")

        found_schedule = []
        for day, schedule in full_schedule.items():
            if re.search(DATE_REGEX, day):
                match = re.search(DATE_REGEX, day)
                if match:
                    found_date = match.group(1)
                    if found_date == date_str:
                        found_schedule.append((day, schedule))

        if found_schedule:
            response = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date_str}:\n"
            for day, schedule in found_schedule:
                for item in schedule:
                    time = item['time']
                    subject = item['subject']
                    response += f"üïí {time} - {subject}\n"
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
            await send_message_in_parts(message, response)
            await send_commands(message)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        else:
            await message.answer("–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def send_message_in_parts(message: Message, text: str):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ –æ—á–µ—Ä–µ–¥–∏.
    """
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
    part_size = 4096
    for i in range(0, len(text), part_size):
        await message.answer(text[i:i + part_size])


async def send_commands(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.
    """
    commands = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "- **–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ** ‚Äî —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "- **–ù–µ–¥–µ–ª—è** ‚Äî —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é\n"
        "- –í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì ‚Äî —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"
    )
    await message.answer(commands)
