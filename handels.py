from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from Parser import Parser

router = Router()

@router.message(F.command("start"))
async def cmd_start(message: Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")],
            [KeyboardButton(text="–ù–µ–¥–µ–ª—è")],
            [KeyboardButton(text="–î—Ä—É–≥–∞—è –∫–Ω–æ–ø–∫–∞")],
        ],
        resize_keyboard=True  # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    )

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ –ª—é–±–æ–º —á–∞—Ç–µ
@router.message(F.text)
async def handle_message(message: Message):
    if not message.text:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.")
        return

    text = message.text.lower()
    print(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: {text}")  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç

    # –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, —Ç–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.chat.type == "group" or message.chat.type == "supergroup":
        if text not in ["–≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–Ω–µ–¥–µ–ª—è", "–¥—Ä—É–≥–∞—è –∫–Ω–æ–ø–∫–∞"]:
            return  # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π, –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ
    if text == "–≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        await send_full_schedule(message)
    elif text == "–Ω–µ–¥–µ–ª—è":
        await send_schedule_for_week(message)
    elif text == "–¥—Ä—É–≥–∞—è –∫–Ω–æ–ø–∫–∞":
        await message.answer("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–æ–π –∫–Ω–æ–ø–∫–∏.")
    else:
        await message.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.chat.type == "private")
async def private_message_handler(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤.
    """
    await handle_message(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö
@router.message(F.chat.type == "group")
async def group_message_handler(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø.
    """
    # –ë–æ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–∞–Ω–¥–µ
    text = message.text.lower()
    if text not in ["–≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "–Ω–µ–¥–µ–ª—è", "–¥—Ä—É–≥–∞—è –∫–Ω–æ–ø–∫–∞"]:
        return  # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    await handle_message(message)

async def send_full_schedule(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.
    """
    parser = Parser(Parser.url)
    soup = parser.parse()

    if soup:
        full_schedule = parser.extract_schedule(soup)
        response = "üìÖ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"

        for day, schedule in full_schedule.items():
            response += f"üìÖ **{day}**\n"
            for item in schedule:
                time = item['time']
                subject = item['subject']
                response += f"üïí {time} - {subject}\n"
            response += "\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Å—Ç—è–º, –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ
            if len(response) > 3000:
                await message.answer(response)
                response = ""

        if response:
            await message.answer(response)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def send_schedule_for_week(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    """
    parser = Parser(Parser.url)
    soup = parser.parse()

    if soup:
        full_schedule = parser.extract_schedule(soup)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
        all_schedules = []
        for day, schedule in full_schedule.items():
            all_schedules.append((day, schedule))

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        last_7_days = all_schedules[-7:]

        response = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n\n"
        for day, schedule in last_7_days:
            response += f"üìÖ **{day}**\n"
            for item in schedule:
                time = item['time']
                subject = item['subject']
                response += f"üïí {time} - {subject}\n"
            response += "\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Å—Ç—è–º, –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ
        if len(response) > 3000:
            await message.answer(response)
            response = ""

        if response:
            await message.answer(response)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

