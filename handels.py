from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from Parser import Parser

router = Router()

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(F.command("start"))
async def cmd_start(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="full_schedule"),
                InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data="week_schedule"),
            ],
            [
                InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data="next_week"),
                InlineKeyboardButton(text="–î—Ä—É–≥–∞—è –∫–Ω–æ–ø–∫–∞", callback_data="other_button"),
            ],
        ]
    )

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@router.callback_query()
async def handle_callback(callback: CallbackQuery):
    action = callback.data

    if action == "full_schedule":
        await send_full_schedule(callback.message)
    elif action == "week_schedule":
        await send_schedule_for_week(callback.message)
    elif action == "next_week":
        await callback.message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    elif action == "other_button":
        await callback.message.answer("–≠—Ç–æ –¥—Ä—É–≥–∞—è –∫–Ω–æ–ø–∫–∞.")
    else:
        await callback.message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async def send_full_schedule(message: Message):
    parser = Parser(Parser.url)
    soup = parser.parse()

    if soup:
        full_schedule = parser.extract_schedule(soup)
        response = "üìÖ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n"

        for day, schedule in full_schedule.items():
            response += f"üìÖ **{day}**\n"
            for item in schedule:
                time = item['time']
                subject = item['subject']
                response += f"üïí {time} - {subject}\n"
            response += "\n"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Å—Ç—è–º, –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ
            if len(response) > 3000:
                await message.answer(response)
                response = ""

        if response:
            await message.answer(response)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é
async def send_schedule_for_week(message: Message):
    parser = Parser(Parser.url)
    soup = parser.parse()

    if soup:
        full_schedule = parser.extract_schedule(soup)

        # –°–æ–±–∏—Ä–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        all_schedules = []
        for day, schedule in full_schedule.items():
            all_schedules.append((day, schedule))

        last_7_days = all_schedules[-7:]

        response = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n\n"
        for day, schedule in last_7_days:
            response += f"üìÖ **{day}**\n"
            for item in schedule:
                time = item['time']
                subject = item['subject']
                response += f"üïí {time} - {subject}\n"
            response += "\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Å—Ç—è–º, –µ—Å–ª–∏ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ
        if len(response) > 3000:
            await message.answer(response)
            response = ""

        if response:
            await message.answer(response)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
